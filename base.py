import requests
import pandas
from config import token, station_ids
from db_connector import save_to_postgresql
from datetime import datetime




def get_stations_data():
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ–¥–∏–Ω JSON-—Ñ–∞–π–ª."""

    all_stations_data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

    for station_id in station_ids:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.get(f'https://api.waqi.info/feed/@{station_id}/?token={token}')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200:
                data = response.json()['data']

                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                station_name = data['city'].get('name', None)
                air_quality_index = data.get('aqi', None)
                dominant_pollutant = data.get('dominentpol', None)
                pm10 = data.get('iaqi', {}).get('pm10', {}).get('v', None)
                pm25 = data.get('iaqi', {}).get('pm25', {}).get('v', None)
                nitrogen_dioxide = data.get('iaqi', {}).get('no2', {}).get('v', None)
                humidity = data.get('iaqi', {}).get('h', {}).get('v', None)
                #temperature = data.get('iaqi', {}).get('t', {}).get('v', None)
                #timestamp = data['time']['iso']
                location = data['city'].get('location', None)
                #latitude = data["city"]["geo"][0] if "city" in data else None
                #longitude = data["city"]["geo"][1] if "city" in data else None
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
                timestamp = data.get("time", {}).get("iso", None)
                if timestamp:
                    timestamp = timestamp.replace("Z", "")  # –£–±–∏—Ä–∞–µ–º 'Z', –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        timestamp = datetime.fromisoformat(timestamp)  # –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    except ValueError:
                        timestamp = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S%z")  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É (—á—Ç–æ–±—ã PostgreSQL –ø—Ä–∏–Ω—è–ª –∏—Ö –∫–∞–∫ POINT)

                coordinates = data.get('city', {}).get('geo', [None, None])
                coordinates_str = f"({coordinates[0]}, {coordinates[1]})"

                # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
                station_info = {
                    'station_name': station_name,
                    'air_quality_index': air_quality_index,
                    'dominant_pollutant': dominant_pollutant,
                    'pm10': pm10,
                    'pm25': pm25,
                    'nitrogen_dioxide': nitrogen_dioxide,
                    'humidity': humidity,
                    #'—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': temperature,
                    'time': timestamp,
                    'location': location,
                    #"—à–∏—Ä–æ—Ç–∞": latitude,
                    #"–¥–æ–ª–≥–æ—Ç–∞": longitude,
                    'coordinates': coordinates_str,
                }

                all_stations_data.append(station_info)
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}, –ø–æ–¥—Å—á–µ—Ç - {len(all_stations_data)}")

            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}) –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}")

        except Exception as ex:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}: {ex}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω JSON-—Ñ–∞–π–ª
    # with open('all_station_result.json', "w", encoding="utf-8") as file:
    #     json.dump(all_data, file, indent=4, ensure_ascii=False)
    #df_aqi.to_csv("air_quality_data.csv", encoding="utf-8")
    df_aqi = pandas.DataFrame(all_stations_data)
    df_aqi.to_csv("air_quality_data.csv", index=False, encoding="utf-8")

    print("\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV: air_quality_data.csv")

    return all_stations_data


# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    station_data = get_stations_data()

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if station_data:
        save_to_postgresql(station_data)